@model List<PurchasedOrderViewModel>
@{
    ViewData["Title"] = "PurchasedOrder";
}

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="my-3">
                <a href="#" id="addnew" class="btn btn-success btn-lg">Add New Product</a>


                @*@Html.DropDownListFor(,
                    new SelectList(Select(x => new { Value = x.ID, Text = x.Name }), "Value", "Text"),
                    "Select Category", htmlAttributes: new { @class = "form-control border-input" })*@


            </div>
        </div>
    </div>
    <div class="">
        <form asp-action="PurchasedOrder" method="post">
            <table id="datatable" border="0" cellpadding="0" cellspacing="0" class="table table-hover table-bordered table-striped table-responsive">
                <thead>
                    <tr>

                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Category</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @if (Model != null && Model.Count > 0)
                    {
                        int j = 0;

                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@Html.TextBoxFor(x => x[j].product.Name, htmlAttributes: new { @class = "form-control border-input" })</td>
                                <td>@Html.TextBoxFor(x => x[j].product.Description, htmlAttributes: new { @class = "form-control border-input" })</td>
                                <td>@Html.TextBoxFor(x => x[j].product.Price, htmlAttributes: new { @class = "form-control border-input" })</td>
                                <td>@Html.TextBoxFor(x => x[j].product.Quantity, htmlAttributes: new { @class = "form-control border-input" })</td>
                                <td>
                                    @Html.DropDownListFor(x => x[j].product.CategoryID,
                                     new SelectList(item.categories.Select(x => new { Value = x.ID, Text = x.Name }), "Value", "Text"),
                                     "Select Category", htmlAttributes: new { @class = "form-control border-input" })
                                </td>
                                <td>
                                    @if (j > 0)
                                    {
                                        <a href="#" class="remove">Remove</a>
                                    }
                                </td>
                            </tr>
                            j++;
                        }
                    }


                </tbody>
            </table>

            <div class="my-3">
                <div class="row">
                    <div class="col-md-6">
                        <input type="submit" name="submit" class="btn btn-success btn-block" />
                    </div>
                    <div class="col-md-6">
                        <a asp-controller="Home" asp-action="Index" class="btn btn-danger btn-block">Back to Dashboard</a>
                    </div>

                </div>

            </div>
        </form>
    </div>
</div>



<script language="javaScript">

    $(document).ready(function () {

        //add new row
        $("#addnew").click(function (e) {
            e.preventDefault();

            var $tableBody = $("#datatable");
            var $trLast = $tableBody.find("tr:last");
            var $trNew = $trLast.clone();

            var suffix = $trNew.find("input:first").attr("name").match(/\d+/);
            $trNew.find("td.last").html("<a href='#' class='remove'>Remove</a>");
            $.each($trNew.find(":input"), function (i, val) {

                var oldN = $(this).attr('name');
                var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                this.attr('name', newN);

                var type = $(this).attr('type');

                if (type.toLowerCase() == "text") {
                    $(this).attr("value", "");
                }
                this.removeClass("input-validation-error");
            });

            $trLast.after($trNew);

            var form = $("form")
                .removeData("validator")
                .removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
        });

        $('a.remove').live("click", function (e) {

            e.preventDefault();
            this.parent().parent().remove();
        });
    });
</script>
